import { GoogleGenerativeAI } from '@google/generative-ai';
import { GoogleAIFileManager, FileState } from '@google/generative-ai/server';
import { shuffle } from '@thi.ng/arrays/shuffle';
import { Command, Option } from 'commander';
import ct from 'dotenv';
import De from 'kleur';
import w from 'node:fs';
import y from 'node:path';
import { fileURLToPath } from 'node:url';
import ee from 'fluent-ffmpeg';
import ae from 'node:readline';
import { fileTypeFromBuffer } from 'file-type';
import { shuffle as shuffle$1 } from '@thi.ng/arrays';
import { constrain, floorF } from '@daeinc/math';

var X={name:"supercut",version:"0.2.2",description:"",main:"index.js",bin:{supercut:"bin/supercut.js"},type:"module",scripts:{dev:"nodemon -w src/server -x tsx src/server/index.ts",start:"NODE_ENV=production tsx src/server/main.ts",watch:"tsup --watch",build:"tsc --noemit && tsup ./src/cli/index.ts && just copy-files"},keywords:[],author:"Daeinc",devDependencies:{"@types/express":"^4.17.21","@types/fluent-ffmpeg":"^2.1.24","@types/node":"^20.14.11","@types/react":"^18.3.3","@types/react-dom":"^18.3.0","@vitejs/plugin-react":"^4.3.1",nodemon:"^3.1.4",prettier:"^3.3.3",tsup:"^8.1.2",typescript:"^5.5.3"},dependencies:{"@daeinc/math":"^0.7.0","@google/generative-ai":"^0.15.0","@thi.ng/arrays":"^2.9.10",commander:"^12.1.0",dotenv:"^16.4.5",express:"^4.19.2","file-type":"^19.2.0","fluent-ffmpeg":"^2.1.3",kleur:"^4.1.5",react:"^18.3.1","react-dom":"^18.3.1",tsx:"^4.16.2","vite-express":"^0.17.0"}};var F=["video/mp4","video/mpeg","video/mov","video/avi","video/x-flv","video/mpg","video/webm","video/wmv","video/3gpp"],_=`You are an assistant tasked with returning video timestamps from a user request. 
These timestamps will be used to render short video clips for film and video research. 
Give an accurate response for the following prompt:`,G=`Return the timestamps in the format ##:##-##:## for each section on each line. 
Only return timestamps and a short unique description in 5 to 12 words on each line. 
Do not add anything else. Do not format the response as markdown list.`;function Z(e){let t=[],o=/[-\s]?(\d{1,2}:\d{2})-(\d{1,2}:\d{2})[-\s]?[-\s]?(.+)/g,n;for(;(n=o.exec(e))!==null;){let[i,r,m,d]=n;t.push({start:r,end:m,description:d.trim()});}return t}async function P(e,t){let o=await q(e);return !!t.find(i=>i===o)}async function q(e){let t=w.createReadStream(e),o=[];for await(let r of t)if(o.push(r),o.length>=4100)break;let n=Buffer.concat(o),i=await fileTypeFromBuffer(n);return i?i.mime:"unknown"}function S(e,t,o={overwrite:!1}){let n=y.dirname(e);if(w.existsSync(n)||w.mkdirSync(n,{recursive:!0}),w.existsSync(e)&&!o.overwrite){console.warn(`The file ${e} already exists. Skipping.. To overwrite the file, set { overwrite: true }.`);return}w.writeFileSync(e,t,"utf8");}function A(e){return w.existsSync(e)?w.lstatSync(e).isDirectory():(console.log(`Path does not exist ${e}`),!1)}function U(e){let[t,o]=e.split(":").map(Number);if(t<0||t>59||o<0||o>59)throw new Error("Invalid timestamp format. Please use MM:SS.");return t*60+o}var N=e=>{let t=e.getTimezoneOffset();e.setMinutes(e.getMinutes()-t);let o=e.toISOString(),[,n,i,r,m,d,l]=o.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/);return `${n}.${i}.${r}-${m}.${d}.${l}`};var{yellow:C}=De;function te(e){e.command("encode").description("Encode videos in a directory with ffmpeg").addOption(new Option("-v, --video <filepaths...>","Video file paths").conflicts("directory")).option("-d, --directory <folder_path>","Directory path containing videos").option("-w, --width <width>","target width").option("-h, --height <height>","target height").action(async t=>{(t.video&&t.directory||!(t.video||t.directory))&&(console.error("Missing required option: '--video <path...>' or '--directory <path>', but do not use both"),process.exit(1));let o=[];if(t.directory){A(t.directory)||(console.error(`Cannot handle path ${C(t.directory)}`),process.exit(1));let p=w.readdirSync(t.directory);for(let s=0;s<p.length;s++){let f=p[s],u=y.join(t.directory,f);if(w.lstatSync(u).isFile()){if(!await P(u,F)){console.log(`Not supported file type: ${C(u)}`);continue}o.push(f);}}}else o=t.video;let n=t.directory||process.cwd(),i=y.join(n,"encoded");w.existsSync(i)||w.mkdirSync(i,{recursive:!0});let r=60*60,m=[],d=new Set;for(let p=0;p<o.length;p++){let s=o[p],f=y.join(n,s);if(!w.lstatSync(f).isFile())continue;if(!await P(f,F)){console.log(`Not supported file type: ${C(f)}`);continue}let u=await Ge(f);u&&(_e(d,[u.width,u.height]),m.push({filePath:s,width:u.width,height:u.height,aspectRatio:u.aspectRatio,duration:u.duration}));}let l=Array.from(d).map(p=>p.split(",").map(Number)),[a,c]=Me(l);t.width&&(a=t.width),t.height&&(c=t.height),console.log(`Encoding to target dimensions: [${a}, ${c}]`);for(let p=0;p<o.length;p++){let{filePath:s,width:f,height:u,aspectRatio:x,duration:g}=m[p],T=y.join(n,s),E=y.join(i,`${s}`),J=y.extname(E),Se=y.basename(E,J),Fe=y.dirname(E),Q=Math.ceil(g/r);for(let M=0;M<Q;M++){let Pe=M*r,Ce=Q>1?y.join(Fe,Se+`-${(M+1).toString().padStart(2,"0")}`+J):E;try{let V=await Oe(T,E,{width:f,height:u,targetWidth:a,targetHeight:c,aspectRatio:x,options:t,startTime:Pe,maxSegmentDuration:r,segmentFilePath:Ce});console.log(V);}catch(V){console.error(V);}}}});}function Oe(e,t,o){let{width:n,height:i,targetWidth:r,targetHeight:m,aspectRatio:d,options:l,startTime:a,maxSegmentDuration:c,segmentFilePath:p}=o;return new Promise((s,f)=>{let u=ee(e),x=n>r||i>m?"decrease":"increase";l.width&&l.height?u.videoFilters(`scale=${r}:${m}:force_original_aspect_ratio=increase,crop=${r}:${m}`):d>r/m?u.videoFilters(`scale=-1:${m}:force_original_aspect_ratio=${x},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${r}:${m},scale=trunc(iw/2)*2:trunc(ih/2)*2`):u.videoFilters(`scale=${r}:-1:force_original_aspect_ratio=${x},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${r}:${m},scale=trunc(iw/2)*2:trunc(ih/2)*2`),u.output(p).videoCodec("libx264").audioCodec("aac").setStartTime(a).setDuration(c).outputOptions("-c:v","libx264","-pix_fmt","yuv420p","-ac","2","-g","24","-keyint_min","24","-sc_threshold","0").on("start",()=>{console.log(`Encoding started: ${C(p)}`);}).on("progress",g=>{ae.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${g.frames} | FPS: ${g.currentFps} | Time: ${g.timemark} | Progress: ${g.percent.toFixed(2)}%`);}).on("end",()=>{console.log(),s("Encoding completed");}).on("error",g=>f(`Error encoding video: ${C(t)} ${g}`)).run();})}function Me(e){let t={};e.forEach(i=>{let r=i.toString();t[r]=(t[r]||0)+1;});let o=null,n=0;for(let[i,r]of Object.entries(t))r>n&&(o=i,n=r);return o?o.split(",").map(Number):[]}function _e(e,t){let o=`${t}`;e.add(o);}async function Ge(e){try{let t=await new Promise((c,p)=>{ee.ffprobe(e,(s,f)=>{s?p(s):c(f);});}),o=t.streams.find(c=>c.codec_type==="video");if(!o)throw new Error("No video stream found");let{width:n,height:i,r_frame_rate:r,display_aspect_ratio:m}=o,d;if(r){let[c,p]=r.split("/").map(Number);d=c/p;}let l;if(m){let[c,p]=m.split(":").map(Number);l=c/p;}let a=t.format.duration;return {width:n,height:i,frameRate:d,aspectRatio:l,duration:a}}catch(t){console.error(`Failed to get the video metadata of ${C(e)}`,t);return}}var{yellow:ne}=De;async function se(e){e.command("cliplist").description("Generate cliplist text file from directory of video files").requiredOption("-d, --directory <folder_path>","Directory of video clips").option("-w, --overwrite","Overwrite existing cliplist file").option("-r, --random","Random order for clip list file").option("--concat","Create concatenated clip list as well").action(async t=>{await Ne(t);});}async function Ne(e){let{directory:t,random:o,overwrite:n,concat:i}=e;w.readdir(t,async(r,m)=>{if(r){console.error(`Error reading video directory: ${r}`);return}let d=m.filter(c=>c.endsWith("mp4")),l=je(d),a=[];for(let c in l){let p=l[c];o&&shuffle$1(p);let s=p.map(u=>`file ${u}`).join(`
`),f=y.join(t,`${c}-cliplist.txt`);console.log(`Writing cliplist: ${ne(f)}`),S(f,s,{overwrite:n}),i&&a.push(...s.split(`
`));}if(i){e.random&&shuffle$1(a);let c=y.join(t,"all-cliplist.txt");console.log(`Writing concatenated cliplist: ${ne(c)}`),w.writeFileSync(c,a.join(`
`),"utf8");}});}function je(e){return e.reduce((t,o)=>{let n=o.match(/^(\d{3})-/);if(n){let i=n[1];t[i]||(t[i]=[]),t[i].push(o);}return t},{})}var{bold:We,red:ce,yellow:L}=De;function pe(e){e.command("clips").description("Generate video clips based on given timestamps").requiredOption("-v, --video <video_file>","Video file path").requiredOption("-t, --timestamps <text_file>","Text file containing timestamps").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side").option("-r, --random","Write clip list in random order").action(t=>{z(t);});}async function z(e){let t=w.readFileSync(e.timestamps,"utf8"),o=y.dirname(e.timestamps),n=Z(t);console.log(We(`Generating video clips... (${n.length} clips in total)`));let i=e.index;if(!i){let m=y.basename(e.timestamps).match(/^\d{3}/);if(m){let d=m[0];i=Number(d);}else console.error(`Format the timestamps file to have 3 digit index at the beginning (ex. 000) ${e.timestamps}`),process.exit(1);}try{let r=await He(e.video,i,e.buffer,n,o);e.random&&shuffle(r);let m=r.map(a=>`file ${a}`).join(`
`),d=`${i.toString().padStart(3,"0")}-cliplist.txt`,l=y.join(o,d);S(l,m,{overwrite:!0}),console.log(`Clip list is saved to ${L(l)}
`);}catch(r){throw new Error(`${ce("Error creating video clip:")} ${r}`)}}async function He(e,t,o=0,n,i){return new Promise(async(r,m)=>{let d=[],l=t?.toString().padStart(3,"0");for(let a=0;a<n.length;a++){let c=n[a],{start:p,end:s,description:f}=c,u=a.toString().padStart(3,"0"),x=`${l}-${u}-${f.replace(/[\s\-\/!@#$%^&*()?;:,.'"]/g,"_")}.mp4`,g=y.join(i,x);try{let T=await Be(e,p,s,o,g);d.push(x),console.log(T);}catch(T){console.error(ce("createClip()"),T),m();}}console.log("All clips created successfully."),r(d);})}var Be=(e,t,o,n=0,i)=>{let r=U(t),m=U(o),d=Math.max(1,m-r);n=Number(n);let l=constrain(r-n,0,r+d*.5),a=Math.max(m+n,r+d*.5),c=floorF(a-l,3);if(n&&console.log({geminiClipDuration:d,newduration:c}),c<1/120)throw new Error(`Video clip duration is too small: ${c} Check the "options.buffer"`);return new Promise((p,s)=>{ee(e).setStartTime(l).setDuration(c).videoCodec("libx264").audioCodec("aac").outputOptions("-pix_fmt","yuv420p","-crf","21","-b:a","192k").output(i).on("start",()=>{}).on("progress",f=>{ae.cursorTo(process.stdout,0),process.stdout.write(`Video clip encoding: ${L(i)} | Progress: ${f.percent.toFixed(2)}%`);}).on("end",()=>{ae.cursorTo(process.stdout,0),console.log(),p(`Video clip created: ${L(i)}`);}).on("error",f=>s(`Error encoding video: ${L(i)} ${f}`)).run();})};var{bold:Qe,yellow:le}=De;function de(e){e.command("concat").description("Concatenate video clips into one").requiredOption("-l, --clip-list <clip_list_file>","Clip list file path").action(t=>{let o=y.dirname(t.clipList),n=y.join(o,"supercut.mp4");W(t,n);});}async function W(e,t){try{console.log(Qe("Concatenating video clips..."));let o=await Xe(e.clipList,t);console.log(o);}catch(o){console.error(o);}}async function Xe(e,t){return new Promise((o,n)=>{ee(e).inputOptions(["-f","concat","-safe","0"]).outputOptions(["-c:v libx264","-pix_fmt yuv420p","-crf 21","-c:a aac","-b:a 192k","-preset ultrafast","-movflags","+faststart","-shortest","-af apad","-avoid_negative_ts make_zero","-fflags +genpts"]).output(t).on("start",()=>{console.log(`Concatenating started: ${le(t)}`);}).on("progress",i=>{ae.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${i.frames} | FPS: ${i.currentFps} | Time: ${i.timemark} | Progress: ${i.percent?.toFixed(2)}%`);}).on("end",()=>{console.log(),o("Encoding completed");}).on("error",i=>n(`Error encoding video: ${le(t)} ${i}`)).run();})}var{bold:D,red:ue,yellow:H}=De;function ge(e,t,o){e.command("timestamps").description("Generate text response from uploaded video").requiredOption("-i, --id <video_id>","Uploaded video ID").requiredOption("-p, --prompt <prompt>","Prompt for Gemini").option("-m, --model <model>","Gemini model to use for inference. (gemini-1.5-flash or gemini-1.5-pro)","gemini-1.5-flash").action(n=>{B(n,t,o,!0);});}async function B(e,t,o,n){let i=e.promptPrepend||_,r=e.promptAppend||G,m=e.outputPath||`output/${N(new Date)}`,d=t.getGenerativeModel({model:e.model}),l=e.index||0,a;try{a=await o.getFile(e.id),console.log(`Retrieved file ${H(a.displayName)} as ${H(a.uri)}
`),n&&(i&&console.log(`${D("Prepended prompt")}
${i}`),console.log(`${D("User prompt:")}`),console.log(e.prompt),r&&console.log(`${D("Appended prompt:")}
${r}
`));}catch(c){throw new Error(`${ue("Error getting file from Google:")} ${c}`)}try{console.log(D(`Waiting for Gemini response...
`));let c=await d.generateContent([{fileData:{mimeType:a.mimeType,fileUri:a.uri}},{text:i+`
`+e.prompt+`
`+r}]);console.log(D("Response:")),console.log(c.response.text());let p=`${l.toString().padStart(3,"0")}-timestamps.txt`,s=y.join(m,p);S(s,c.response.text(),{overwrite:!0}),console.log(`Response saved to ${H(s)}
`);let f=`${i}
${e.prompt}
${r}`;S(y.join(m,"prompt.txt"),f,{overwrite:!0});}catch(c){throw new Error(`${ue("Error generating Gemini response:")} ${c}`)}}function he(e,t){e.command("list-files").description("See the list of files uploaded to Google").option("-n, --num <value>","How many videos to display","100").action(async o=>{let n=Number(o.num),i=0,r=Math.min(n,100),m=await t.listFiles({pageSize:r});console.log(m.files),i+=m.files.length;let d=m.nextPageToken;for(;d&&i<n;){let l=n-i;r=Math.min(l,100);let a=await t.listFiles({pageToken:d,pageSize:r});console.log(a.files),i+=a.files.length,d=a.nextPageToken;}console.log(`Found ${i} files.`);});}var{bold:we,red:ve,yellow:b}=De;function xe(e,t){e.command("upload").description("Upload a video file to Google cloud to use with Gemini inference").requiredOption("-v, --video <video_filepath>","Video to upload").action(o=>{Y(o,t);});}async function Y(e,t){let o=y.basename(e.video),n=await q(e.video),i=w.statSync(e.video).size.toString(),r=100,m=await t.listFiles({pageSize:r}),{files:d,nextPageToken:l}=m,a=s=>s.find(f=>f.displayName===o&&f.sizeBytes===i),c=a(d);for(;l&&!c;){let s=await t.listFiles({pageToken:l,pageSize:r});l=s.nextPageToken,c=a(s.files);}if(c){let{displayName:s,name:f,uri:u}=c;return console.log(`File ${b(s)} is found as ${b(u)}
`),f}console.log(we(`Uploading video ${b(o)}
`));let p="";try{p=(await t.uploadFile(e.video,{mimeType:n,displayName:o})).file.name;}catch(s){console.error(ve("Error uploading file")),s instanceof Error&&(console.log(s.name),console.log(s.message));}try{let s=await t.getFile(p);for(process.stdout.write(we(`Checking video state ${b(o)}`));s.state===FileState.PROCESSING;)await new Promise(f=>setTimeout(f,1e4)),s=await t.getFile(p),process.stdout.write(".");if(process.stdout.write(`
`),s.state===FileState.FAILED)throw new Error("Video processing failed.");console.log(`File ${b(s.displayName)} is uploaded and ready for inference as ${b(s.uri)}
`);}catch(s){console.error(ve("Error verifying upload"),s);}return p}var{blue:lt,bold:I,yellow:R}=De,h=new Command,dt=y.dirname(fileURLToPath(import.meta.url)),ft=y.dirname(dt);ct.config({path:y.join(ft,".env")});var K=process.env.GEMINI_API_KEY;K===void 0&&(console.error("Error: GEMINI_API_KEY is not provided. Create `.env` file and add the API key."),process.exit(1));var $e=new GoogleGenerativeAI(K),O=new GoogleAIFileManager(K);h.name("supercut").description("Create a supercut video with LLM-generated timestamps").version(X.version);h.command("main").description("Main command").addOption(new Option("-v, --video <filepaths...>","Video file paths").conflicts("directory")).option("-d, --directory <folder_path>","Folder path").requiredOption("-p, --prompt <text>","Text prompt to send Gemini").option("-pp, --prompt-prepend <prompt>","Prompt to prepend").option("-pa, --prompt-append <prompt>","Prompt to append").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side.").option("-m, --model <model>","Gemini model to use for inference.","gemini-1.5-flash").option("-r, --random","Concatenate clips in random order").action(async e=>{(e.video&&e.directory||!(e.video||e.directory))&&(console.error("Missing required option: '--video <path...>' or '--directory <path>', but do not use both"),process.exit(1));let t=`output/${N(new Date)}`;w.existsSync(t)||w.mkdirSync(t,{recursive:!0});let o=[];if(e.directory){A(e.directory)||(console.error(`Cannot handle path ${R(e.directory)}`),process.exit(1));let l=w.readdirSync(e.directory);for(let a=0;a<l.length;a++){let c=l[a],p=y.join(e.directory,c);if(w.lstatSync(p).isFile()){if(!await P(p,F)){console.log(`Not supported file type: ${R(p)}`);continue}o.push(c);}}}else o=e.video;let n=e.promptPrepend||_,i=e.promptAppend||G;n&&console.log(`${I("Prepended prompt")}
${n}`),console.log(`${I("User prompt:")}`),console.log(e.prompt),i&&console.log(`${I("Appended prompt:")}
${i}
`);for(let l=0;l<o.length;l++){let a=o[l];if(!w.lstatSync(a).isFile()){console.log(`Not a file: ${R(a)}`);continue}if(!await P(a,F)){console.log(`Not supported file type: ${R(a)}`);continue}console.log(I(lt(`Processing ${l+1} of ${o.length} videos`)));let c="",p="";try{p=await Y({video:a},O);}catch(s){console.error("Error uploading video:",s);}c=a;try{await B({...e,id:p,index:l,outputPath:t},$e,O,!1);}catch(s){console.error(s);continue}try{await z({video:c,index:l,buffer:e.buffer,timestamps:y.join(t,`${l.toString().padStart(3,"0")}-timestamps.txt`),random:e.random});}catch(s){console.error(s);continue}}let r=[];try{(await w.promises.readdir(t)).filter(a=>a.endsWith("cliplist.txt")).forEach(a=>{let p=w.readFileSync(y.join(t,a),"utf8").split(/\r?\n/);r.push(...p);});}catch{console.error("Error reading output directory");}e.random&&shuffle(r);let m=y.join(t,"all-cliplist.txt");w.writeFileSync(m,r.join(`
`),"utf8");let d=y.join(t,"supercut.mp4");await W({clipList:m},d),console.log(I(`Done
`));});te(h);xe(h,O);ge(h,$e,O);pe(h);se(h);de(h);he(h,O);h.parse();
