import { GoogleGenerativeAI } from '@google/generative-ai';
import { GoogleAIFileManager, FileState } from '@google/generative-ai/server';
import { shuffle } from '@thi.ng/arrays/shuffle';
import { Command } from 'commander';
import st from 'dotenv';
import Ee from 'kleur';
import v from 'node:fs';
import w from 'node:path';
import { fileURLToPath } from 'node:url';
import X from 'fluent-ffmpeg';
import ne from 'node:readline';
import { fileTypeFromBuffer } from 'file-type';
import { shuffle as shuffle$1 } from '@thi.ng/arrays';
import { constrain, floorF } from '@daeinc/math';

var D=["video/mp4","video/mpeg","video/mov","video/avi","video/x-flv","video/mpg","video/webm","video/wmv","video/3gpp"],G=`You are an assistant tasked with returning video timestamps from a user request. 
These timestamps will be used to render short video clips for film and video research. 
Give an accurate response for the following prompt:`,M=`Return the timestamps in the format ##:##-##:## for each section on each line. 
Only return timestamps and a short unique description in 5 to 12 words on each line. 
Do not add anything else. Do not format the response as markdown list.`;function J(e){let t=[],o=/[-\s]?(\d{1,2}:\d{2})-(\d{1,2}:\d{2})[-\s]?[-\s]?(.+)/g,r;for(;(r=o.exec(e))!==null;){let[i,n,p,c]=r;t.push({start:n,end:p,description:c.trim()});}return t}async function O(e,t){let o=await j(e);return !!t.find(i=>i===o)}async function j(e){let t=v.createReadStream(e),o=[];for await(let n of t)if(o.push(n),o.length>=4100)break;let r=Buffer.concat(o),i=await fileTypeFromBuffer(r);return i?i.mime:"unknown"}function x(e,t,o={overwrite:!1}){let r=w.dirname(e);if(v.existsSync(r)||v.mkdirSync(r,{recursive:!0}),v.existsSync(e)&&!o.overwrite){console.warn(`The file ${e} already exists. Skipping.. To overwrite the file, set { overwrite: true }.`);return}v.writeFileSync(e,t,"utf8");}function Q(e){return v.existsSync(e)?v.lstatSync(e).isDirectory():(console.log(`Path does not exist ${e}`),!1)}function V(e){let[t,o]=e.split(":").map(Number);if(t<0||t>59||o<0||o>59)throw new Error("Invalid timestamp format. Please use MM:SS.");return t*60+o}var _=e=>{let t=e.getTimezoneOffset();e.setMinutes(e.getMinutes()-t);let o=e.toISOString(),[,r,i,n,p,c,s]=o.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/);return `${r}.${i}.${n}-${p}.${c}.${s}`};var{yellow:b}=Ee;function Z(e){e.command("encode").description("Encode videos in a directory with ffmpeg").requiredOption("-d, --directory <video_dir>","Directory path containing videos").option("-w, --width <width>","target width").option("-h, --height <height>","target height").action(async t=>{Q(t.directory)||(console.error(`Cannot handle path ${b(t.directory)}`),process.exit(1));let o=t.directory,r=w.join(o,"encoded");v.existsSync(r)||v.mkdirSync(r,{recursive:!0});let i=60*60,n=[],p=new Set;v.readdir(o,async(c,s)=>{if(c){console.error(`Error reading video directory: ${c}`);return}for(let a=0;a<s.length;a++){let f=s[a],u=w.join(o,f);if(!v.lstatSync(u).isFile())continue;if(!await O(u,D)){console.log(`Not supported file type: ${b(u)}`);continue}let g=await Me(u);g&&(Ge(p,[g.width,g.height]),n.push({filePath:f,width:g.width,height:g.height,aspectRatio:g.aspectRatio,duration:g.duration}));}let l=Array.from(p).map(a=>a.split(",").map(Number)),[m,d]=De(l);t.width&&(m=t.width),t.height&&(d=t.height),console.log(`Encoding to target dimensions: [${m}, ${d}]`);for(let a=0;a<n.length;a++){let{filePath:f,width:u,height:g,aspectRatio:h,duration:P}=n[a],$e=w.join(o,f),C=w.join(r,`${f}`),Y=w.extname(C),Se=w.basename(C,Y),Fe=w.dirname(C),K=Math.ceil(P/i);for(let I=0;I<K;I++){let Pe=I*i,Ce=K>1?w.join(Fe,Se+`-${(I+1).toString().padStart(2,"0")}`+Y):C;try{let N=await Ie($e,C,{width:u,height:g,targetWidth:m,targetHeight:d,aspectRatio:h,options:t,startTime:Pe,maxSegmentDuration:i,segmentFilePath:Ce});console.log(N);}catch(N){console.error(N);}}}});});}function Ie(e,t,o){let{width:r,height:i,targetWidth:n,targetHeight:p,aspectRatio:c,options:s,startTime:l,maxSegmentDuration:m,segmentFilePath:d}=o;return new Promise((a,f)=>{let u=X(e),g=r>n||i>p?"decrease":"increase";s.width&&s.height?u.videoFilters(`scale=${n}:${p}:force_original_aspect_ratio=increase,crop=${n}:${p}`):c>n/p?u.videoFilters(`scale=-1:${p}:force_original_aspect_ratio=${g},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${n}:${p},scale=trunc(iw/2)*2:trunc(ih/2)*2`):u.videoFilters(`scale=${n}:-1:force_original_aspect_ratio=${g},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${n}:${p},scale=trunc(iw/2)*2:trunc(ih/2)*2`),u.output(d).videoCodec("libx264").audioCodec("aac").setStartTime(l).setDuration(m).outputOptions("-c:v","libx264","-pix_fmt","yuv420p","-ac","2","-g","24","-keyint_min","24","-sc_threshold","0").on("start",()=>{console.log(`Encoding started: ${b(d)}`);}).on("progress",h=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${h.frames} | FPS: ${h.currentFps} | Time: ${h.timemark} | Progress: ${h.percent.toFixed(2)}%`);}).on("end",()=>{console.log(),a("Encoding completed");}).on("error",h=>f(`Error encoding video: ${b(t)} ${h}`)).run();})}function De(e){let t={};e.forEach(i=>{let n=i.toString();t[n]=(t[n]||0)+1;});let o=null,r=0;for(let[i,n]of Object.entries(t))n>r&&(o=i,r=n);return o?o.split(",").map(Number):[]}function Ge(e,t){let o=`${t}`;e.add(o);}async function Me(e){try{let t=await new Promise((m,d)=>{X.ffprobe(e,(a,f)=>{a?d(a):m(f);});}),o=t.streams.find(m=>m.codec_type==="video");if(!o)throw new Error("No video stream found");let{width:r,height:i,r_frame_rate:n,display_aspect_ratio:p}=o,c;if(n){let[m,d]=n.split("/").map(Number);c=m/d;}let s;if(p){let[m,d]=p.split(":").map(Number);s=m/d;}let l=t.format.duration;return {width:r,height:i,frameRate:c,aspectRatio:s,duration:l}}catch(t){console.error(`Failed to get the video metadata of ${b(e)}`,t);return}}async function ie(e){e.command("cliplist").description("Generate cliplist text file from directory of video files").requiredOption("-d, --directory <folder_path>","Directory of video files").option("-w, --overwrite","Overwrite existing cliplist file").option("-r, --random","Random order for clip list file").option("--concat","Create concatenated clip list as well").action(async t=>{await _e(t);});}async function _e(e){let{directory:t,random:o,overwrite:r,concat:i}=e;v.readdir(t,async(n,p)=>{if(n){console.error(`Error reading video directory: ${n}`);return}let c=p.filter(m=>m.endsWith("mp4")),s=Ae(c),l=[];for(let m in s){let d=s[m];o&&shuffle$1(d);let a=d.map(u=>`file ${u}`).join(`
`),f=w.join(t,`${m}-cliplist.txt`);x(f,a,{overwrite:r}),i&&l.push(...a.split(`
`));}if(i){e.random&&shuffle$1(l);let m=w.join(t,"all-cliplist.txt");v.writeFileSync(m,l.join(`
`),"utf8");}});}function Ae(e){return e.reduce((t,o)=>{let r=o.match(/^(\d{3})-/);if(r){let i=r[1];t[i]||(t[i]=[]),t[i].push(o);}return t},{})}var{bold:Ue,red:re,yellow:R}=Ee;function se(e){e.command("clips").description("Generate video clips based on given timestamps").requiredOption("-v, --video <video_file>","Video file path").requiredOption("-t, --timestamps <text_file>","Text file containing timestamps").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side").option("-r, --random","Write clip list in random order").action(t=>{q(t);});}async function q(e){let t=v.readFileSync(e.timestamps,"utf8"),o=w.dirname(e.timestamps),r=J(t);console.log(Ue(`Generating video clips... (${r.length} clips in total)`));let i=e.index;if(!i){let p=w.basename(e.timestamps).match(/^\d{3}/);if(p){let c=p[0];i=Number(c);}else console.error(`Format the timestamps file to have 3 digit index at the beginning (ex. 000) ${e.timestamps}`),process.exit(1);}try{let n=await ze(e.video,i,e.buffer,r,o);e.random&&shuffle(n);let p=n.map(l=>`file ${l}`).join(`
`),c=`${i.toString().padStart(3,"0")}-cliplist.txt`,s=w.join(o,c);x(s,p,{overwrite:!0}),console.log(`Clip list is saved to ${R(s)}
`);}catch(n){throw new Error(`${re("Error creating video clip:")} ${n}`)}}async function ze(e,t,o=0,r,i){return new Promise(async(n,p)=>{let c=[],s=t?.toString().padStart(3,"0");for(let l=0;l<r.length;l++){let m=r[l],{start:d,end:a,description:f}=m,u=l.toString().padStart(3,"0"),g=`${s}-${u}-${f.replace(/[\s\-!@#$%^&*()?;:,.'"]/g,"_")}.mp4`,h=w.join(i,g);try{let P=await He(e,d,a,o,h);c.push(g),console.log(P);}catch(P){console.error(re("createClip()"),P),p();}}console.log("All clips created successfully."),n(c);})}var He=(e,t,o,r=0,i)=>{let n=V(t),p=V(o),c=Math.max(1,p-n);r=Number(r);let s=constrain(n-r,0,n+c*.5),l=Math.max(p+r,n+c*.5),m=floorF(l-s,3);if(r&&console.log({geminiClipDuration:c,newduration:m}),m<1/120)throw new Error(`Video clip duration is too small: ${m} Check the "options.buffer"`);return new Promise((d,a)=>{X(e).setStartTime(s).setDuration(m).videoCodec("libx264").audioCodec("aac").outputOptions("-pix_fmt","yuv420p","-crf","21","-b:a","192k").output(i).on("start",()=>{}).on("progress",f=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Video clip encoding: ${R(i)} | Progress: ${f.percent.toFixed(2)}%`);}).on("end",()=>{ne.cursorTo(process.stdout,0),console.log(),d(`Video clip created: ${R(i)}`);}).on("error",f=>a(`Error encoding video: ${R(i)} ${f}`)).run();})};var{bold:Ke,yellow:ce}=Ee;function pe(e){e.command("concat").description("Concatenate video clips into one").requiredOption("-l, --clip-list <clip_list_file>","Clip list file path").action(t=>{let o=w.dirname(t.clipList),r=w.join(o,"supercut.mp4");U(t,r);});}async function U(e,t){try{console.log(Ke("Concatenating video clips..."));let o=await Je(e.clipList,t);console.log(o);}catch(o){console.error(o);}}async function Je(e,t){return new Promise((o,r)=>{X(e).inputOptions(["-f","concat","-safe","0"]).outputOptions(["-c:v libx264","-pix_fmt yuv420p","-crf 21","-c:a aac","-b:a 192k","-preset ultrafast","-movflags","+faststart","-shortest","-af apad","-avoid_negative_ts make_zero","-fflags +genpts"]).output(t).on("start",()=>{console.log(`Concatenating started: ${ce(t)}`);}).on("progress",i=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${i.frames} | FPS: ${i.currentFps} | Time: ${i.timemark} | Progress: ${i.percent?.toFixed(2)}%`);}).on("end",()=>{console.log(),o("Encoding completed");}).on("error",i=>r(`Error encoding video: ${ce(t)} ${i}`)).run();})}var{bold:T,red:le,yellow:z}=Ee;function de(e,t,o){e.command("timestamps").description("Generate text response from uploaded video").requiredOption("-i, --id <video_id>","Uploaded video ID").requiredOption("-p, --prompt <prompt>","Prompt for Gemini").option("-m, --model <model>","Gemini model to use for inference. (gemini-1.5-flash or gemini-1.5-pro)","gemini-1.5-flash").action(r=>{H(r,t,o,!0);});}async function H(e,t,o,r){let i=e.promptPrepend||G,n=e.promptAppend||M,p=e.outputPath||`output/${_(new Date)}`,c=t.getGenerativeModel({model:e.model}),s;try{s=await o.getFile(e.id),console.log(`Retrieved file ${z(s.displayName)} as ${z(s.uri)}
`),r&&(i&&console.log(`${T("Prepended prompt")}
${i}`),console.log(`${T("User prompt:")}`),console.log(e.prompt),n&&console.log(`${T("Appended prompt:")}
${n}
`));}catch(l){throw new Error(`${le("Error getting file from Google:")} ${l}`)}try{console.log(T(`Waiting for Gemini response...
`));let l=await c.generateContent([{fileData:{mimeType:s.mimeType,fileUri:s.uri}},{text:i+`
`+e.prompt+`
`+n}]);console.log(T("Response:")),console.log(l.response.text());let m=`${e.index.toString().padStart(3,"0")}-timestamps.txt`,d=w.join(p,m);x(d,l.response.text(),{overwrite:!0}),console.log(`Response saved to ${z(d)}
`);let a=`${i}
${e.prompt}
${n}`;x(w.join(p,"prompt.txt"),a,{overwrite:!0});}catch(l){throw new Error(`${le("Error generating Gemini response:")} ${l}`)}}function fe(e,t){e.command("list-files").description("See the list of files uploaded to Google").option("-n, --num <value>","How many videos to display","100").action(async o=>{let r=Number(o.num),i=0,n=Math.min(r,100),p=await t.listFiles({pageSize:n});console.log(p.files),i+=p.files.length;let c=p.nextPageToken;for(;c&&i<r;){let s=r-i;n=Math.min(s,100);let l=await t.listFiles({pageToken:c,pageSize:n});console.log(l.files),i+=l.files.length,c=l.nextPageToken;}console.log(`Found ${i} files.`);});}var{bold:ge,red:he,yellow:S}=Ee;function ye(e,t){e.command("upload").description("Upload a video file to Google cloud to use with Gemini inference").requiredOption("-v, --video <video_filepath>","Video to upload").action(o=>{W(o,t);});}async function W(e,t){let o=w.basename(e.video),r=await j(e.video),i=v.statSync(e.video).size.toString(),n=100,p=await t.listFiles({pageSize:n}),{files:c,nextPageToken:s}=p,l=a=>a.find(f=>f.displayName===o&&f.sizeBytes===i),m=l(c);for(;s&&!m;){let a=await t.listFiles({pageToken:s,pageSize:n});s=a.nextPageToken,m=l(a.files);}if(m){let{displayName:a,name:f,uri:u}=m;return console.log(`File ${S(a)} is found as ${S(u)}
`),f}console.log(ge(`Uploading video ${S(o)}
`));let d="";try{d=(await t.uploadFile(e.video,{mimeType:r,displayName:o})).file.name;}catch(a){console.error(he("Error uploading file")),a instanceof Error&&(console.log(a.name),console.log(a.message));}try{let a=await t.getFile(d);for(process.stdout.write(ge(`Checking video state ${S(o)}`));a.state===FileState.PROCESSING;)await new Promise(f=>setTimeout(f,1e4)),a=await t.getFile(d),process.stdout.write(".");if(process.stdout.write(`
`),a.state===FileState.FAILED)throw new Error("Video processing failed.");console.log(`File ${S(a.displayName)} is uploaded and ready for inference as ${S(a.uri)}
`);}catch(a){console.error(he("Error verifying upload"),a);}return d}var we={name:"supercut",version:"0.1.3",description:"",main:"index.js",bin:{supercut:"bin/supercut.js"},type:"module",scripts:{watch:"tsup --watch",build:"tsc --noemit && tsup ./src/cli/index.ts && just copy-files"},keywords:[],author:"Daeinc",devDependencies:{"@types/fluent-ffmpeg":"^2.1.24","@types/node":"^20.14.11",prettier:"^3.3.3",tsup:"^8.1.2",typescript:"^5.5.3"},dependencies:{"@daeinc/math":"^0.7.0","@google/generative-ai":"^0.15.0","@thi.ng/arrays":"^2.9.10",commander:"^12.1.0",dotenv:"^16.4.5","file-type":"^19.2.0","fluent-ffmpeg":"^2.1.3",kleur:"^4.1.5"}};var{blue:pt,bold:E,red:To,yellow:ve}=Ee,y=new Command,mt=w.dirname(fileURLToPath(import.meta.url)),lt=w.dirname(mt);st.config({path:w.join(lt,".env")});var B=process.env.GEMINI_API_KEY;B===void 0&&(console.error("Error: GEMINI_API_KEY is not provided. Create `.env` file and add the API key."),process.exit(1));var xe=new GoogleGenerativeAI(B),k=new GoogleAIFileManager(B);y.name("supercut").description("Create a supercut video with LLM-generated timestamps").version(we.version);y.command("main").description("Main command").requiredOption("-v, --video <filepaths...>","Video file paths").requiredOption("-p, --prompt <text>","Text prompt to send Gemini").option("-pp, --prompt-prepend <prompt>","Prompt to prepend").option("-pa, --prompt-append <prompt>","Prompt to append").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side.").option("-m, --model <model>","Gemini model to use for inference.","gemini-1.5-flash").option("-r, --random","Concatenate clips in random order").action(async e=>{let t=`output/${_(new Date)}`;v.existsSync(t)||v.mkdirSync(t,{recursive:!0});let o=e.promptPrepend||G,r=e.promptAppend||M;o&&console.log(`${E("Prepended prompt")}
${o}`),console.log(`${E("User prompt:")}`),console.log(e.prompt),r&&console.log(`${E("Appended prompt:")}
${r}
`);for(let c=0;c<e.video.length;c++){let s=e.video[c];if(!v.lstatSync(s).isFile()){console.log(`Not a file: ${ve(s)}`);continue}if(!await O(s,D)){console.log(`Not supported file type: ${ve(s)}`);continue}console.log(E(pt(`Processing ${c+1} of ${e.video.length} videos`)));let l="",m="";try{m=await W({video:s},k);}catch(d){console.error("Error uploading video:",d);}l=s;try{await H({...e,id:m,index:c,outputPath:t},xe,k,!1);}catch(d){console.error(d);continue}try{await q({video:l,index:c,buffer:e.buffer,timestamps:w.join(t,`${c.toString().padStart(3,"0")}-timestamps.txt`),random:e.random});}catch(d){console.error(d);continue}}let i=[];try{(await v.promises.readdir(t)).filter(s=>s.endsWith("cliplist.txt")).forEach(s=>{let m=v.readFileSync(w.join(t,s),"utf8").split(/\r?\n/);i.push(...m);});}catch{console.error("Error reading output directory");}e.random&&shuffle(i);let n=w.join(t,"all-cliplist.txt");v.writeFileSync(n,i.join(`
`),"utf8");let p=w.join(t,"supercut.mp4");await U({clipList:n},p),console.log(E(`Done
`));});ye(y,k);de(y,xe,k);se(y);pe(y);Z(y);fe(y,k);ie(y);y.parse();
