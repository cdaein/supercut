import { GoogleGenerativeAI } from '@google/generative-ai';
import { GoogleAIFileManager, FileState } from '@google/generative-ai/server';
import { shuffle } from '@thi.ng/arrays/shuffle';
import { Command } from 'commander';
import st from 'dotenv';
import Ee from 'kleur';
import v from 'node:fs';
import w from 'node:path';
import { fileURLToPath } from 'node:url';
import X from 'fluent-ffmpeg';
import ne from 'node:readline';
import { fileTypeFromBuffer } from 'file-type';
import { shuffle as shuffle$1 } from '@thi.ng/arrays';
import { constrain, floorF } from '@daeinc/math';

var k=["video/mp4","video/mpeg","video/mov","video/avi","video/x-flv","video/mpg","video/webm","video/wmv","video/3gpp"],G="You are a professional video editor who understands video timestamps and can make edits.",O=`Return the timestamps in the format ##:##-##:## for each section on each line. 
Only return timestamps and a short unique description in 5 to 12 words on each line. 
Do not add anything else. Do not format the response as markdown list.`;function J(e){let t=[],i=/[-\s]?(\d{1,2}:\d{2})-(\d{1,2}:\d{2})[-\s]?[-\s]?(.+)/g,r;for(;(r=i.exec(e))!==null;){let[o,n,p,c]=r;t.push({start:n,end:p,description:c.trim()});}return t}async function _(e,t){let i=await R(e);return !!t.find(o=>o===i)}async function R(e){let t=v.createReadStream(e),i=[];for await(let n of t)if(i.push(n),i.length>=4100)break;let r=Buffer.concat(i),o=await fileTypeFromBuffer(r);return o?o.mime:"unknown"}function x(e,t,i={overwrite:!1}){let r=w.dirname(e);if(v.existsSync(r)||v.mkdirSync(r,{recursive:!0}),v.existsSync(e)&&!i.overwrite){console.warn(`The file ${e} already exists. Skipping.. To overwrite the file, set { overwrite: true }.`);return}v.writeFileSync(e,t,"utf8");}function Q(e){return v.existsSync(e)?v.lstatSync(e).isDirectory():(console.log(`Path does not exist ${e}`),!1)}function V(e){let[t,i]=e.split(":").map(Number);if(t<0||t>59||i<0||i>59)throw new Error("Invalid timestamp format. Please use MM:SS.");return t*60+i}var M=e=>{let t=e.getTimezoneOffset();e.setMinutes(e.getMinutes()-t);let i=e.toISOString(),[,r,o,n,p,c,a]=i.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/);return `${r}.${o}.${n}-${p}.${c}.${a}`};var{yellow:b}=Ee;function Z(e){e.command("encode").description("Encode videos in a directory with ffmpeg").requiredOption("-d, --directory <video_dir>","Directory path containing videos").option("-w, --width <width>","target width").option("-h, --height <height>","target height").action(async t=>{Q(t.directory)||(console.error(`Cannot handle path ${b(t.directory)}`),process.exit(1));let i=t.directory,r=w.join(i,"encoded");v.existsSync(r)||v.mkdirSync(r,{recursive:!0});let o=60*60,n=[],p=new Set;v.readdir(i,async(c,a)=>{if(c){console.error(`Error reading video directory: ${c}`);return}for(let d=0;d<a.length;d++){let f=a[d],u=w.join(i,f);if(!v.lstatSync(u).isFile())continue;if(!await _(u,k)){console.log(`Not supported file type: ${b(u)}`);continue}let g=await Oe(u);g&&(Ge(p,[g.width,g.height]),n.push({filePath:f,width:g.width,height:g.height,aspectRatio:g.aspectRatio,duration:g.duration}));}let s=Array.from(p).map(d=>d.split(",").map(Number)),[m,l]=ke(s);t.width&&(m=t.width),t.height&&(l=t.height),console.log(`Encoding to target dimensions: [${m}, ${l}]`);for(let d=0;d<n.length;d++){let{filePath:f,width:u,height:g,aspectRatio:h,duration:C}=n[d],$e=w.join(i,f),P=w.join(r,`${f}`),Y=w.extname(P),Se=w.basename(P,Y),Fe=w.dirname(P),K=Math.ceil(C/o);for(let D=0;D<K;D++){let Ce=D*o,Pe=K>1?w.join(Fe,Se+`-${(D+1).toString().padStart(2,"0")}`+Y):P;try{let j=await De($e,P,{width:u,height:g,targetWidth:m,targetHeight:l,aspectRatio:h,options:t,startTime:Ce,maxSegmentDuration:o,segmentFilePath:Pe});console.log(j);}catch(j){console.error(j);}}}});});}function De(e,t,i){let{width:r,height:o,targetWidth:n,targetHeight:p,aspectRatio:c,options:a,startTime:s,maxSegmentDuration:m,segmentFilePath:l}=i;return new Promise((d,f)=>{let u=X(e),g=r>n||o>p?"decrease":"increase";a.width&&a.height?u.videoFilters(`scale=${n}:${p}:force_original_aspect_ratio=increase,crop=${n}:${p}`):c>n/p?u.videoFilters(`scale=-1:${p}:force_original_aspect_ratio=${g},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${n}:${p},scale=trunc(iw/2)*2:trunc(ih/2)*2`):u.videoFilters(`scale=${n}:-1:force_original_aspect_ratio=${g},pad=ceil(iw/2)*2:ceil(ih/2)*2,crop=${n}:${p},scale=trunc(iw/2)*2:trunc(ih/2)*2`),u.output(l).videoCodec("libx264").audioCodec("aac").setStartTime(s).setDuration(m).outputOptions("-c:v","libx264","-pix_fmt","yuv420p","-ac","2","-g","24","-keyint_min","24","-sc_threshold","0").on("start",()=>{console.log(`Encoding started: ${b(l)}`);}).on("progress",h=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${h.frames} | FPS: ${h.currentFps} | Time: ${h.timemark} | Progress: ${h.percent.toFixed(2)}%`);}).on("end",()=>{console.log(),d("Encoding completed");}).on("error",h=>f(`Error encoding video: ${b(t)} ${h}`)).run();})}function ke(e){let t={};e.forEach(o=>{let n=o.toString();t[n]=(t[n]||0)+1;});let i=null,r=0;for(let[o,n]of Object.entries(t))n>r&&(i=o,r=n);return i?i.split(",").map(Number):[]}function Ge(e,t){let i=`${t}`;e.add(i);}async function Oe(e){try{let t=await new Promise((m,l)=>{X.ffprobe(e,(d,f)=>{d?l(d):m(f);});}),i=t.streams.find(m=>m.codec_type==="video");if(!i)throw new Error("No video stream found");let{width:r,height:o,r_frame_rate:n,display_aspect_ratio:p}=i,c;if(n){let[m,l]=n.split("/").map(Number);c=m/l;}let a;if(p){let[m,l]=p.split(":").map(Number);a=m/l;}let s=t.format.duration;return {width:r,height:o,frameRate:c,aspectRatio:a,duration:s}}catch(t){console.error(`Failed to get the video metadata of ${b(e)}`,t);return}}async function ie(e){e.command("cliplist").description("Generate cliplist text file from directory of video files").requiredOption("-d, --directory <folder_path>","Directory of video files").option("-w, --overwrite","Overwrite existing cliplist file").option("-r, --random","Random order for clip list file").option("--concat","Create concatenated clip list as well").action(async t=>{await Me(t);});}async function Me(e){let{directory:t,random:i,overwrite:r,concat:o}=e;v.readdir(t,async(n,p)=>{if(n){console.error(`Error reading video directory: ${n}`);return}let c=p.filter(m=>m.endsWith("mp4")),a=Ae(c),s=[];for(let m in a){let l=a[m];i&&shuffle$1(l);let d=l.map(u=>`file ${u}`).join(`
`),f=w.join(t,`${m}-cliplist.txt`);x(f,d,{overwrite:r}),o&&s.push(...d.split(`
`));}if(o){e.random&&shuffle$1(s);let m=w.join(t,"all-cliplist.txt");v.writeFileSync(m,s.join(`
`),"utf8");}});}function Ae(e){return e.reduce((t,i)=>{let r=i.match(/^(\d{3})-/);if(r){let o=r[1];t[o]||(t[o]=[]),t[o].push(i);}return t},{})}var{bold:qe,red:re,yellow:N}=Ee;function se(e){e.command("clips").description("Generate video clips based on given timestamps").requiredOption("-v, --video <video_file>","Video file path").requiredOption("-t, --timestamps <text_file>","Text file containing timestamps").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side").option("-r, --random","Write clip list in random order").action(t=>{U(t);});}async function U(e){let t=v.readFileSync(e.timestamps,"utf8"),i=w.dirname(e.timestamps),r=J(t);console.log(qe(`Generating video clips... (${r.length} clips in total)`));let o=e.index;if(!o){let p=w.basename(e.timestamps).match(/^\d{3}/);if(p){let c=p[0];o=Number(c);}else console.error(`Format the timestamps file to have 3 digit index at the beginning (ex. 000) ${e.timestamps}`),process.exit(1);}try{let n=await ze(e.video,o,e.buffer,r,i);e.random&&shuffle(n);let p=n.map(s=>`file ${s}`).join(`
`),c=`${o.toString().padStart(3,"0")}-cliplist.txt`,a=w.join(i,c);x(a,p,{overwrite:!0}),console.log(`Clip list is saved to ${N(a)}
`);}catch(n){throw new Error(`${re("Error creating video clip:")} ${n}`)}}async function ze(e,t,i=0,r,o){return new Promise(async(n,p)=>{let c=[],a=t?.toString().padStart(3,"0");for(let s=0;s<r.length;s++){let m=r[s],{start:l,end:d,description:f}=m,u=s.toString().padStart(3,"0"),g=`${a}-${u}-${f.replace(/[\s\-!@#$%^&*()?;:,.'"]/g,"_")}.mp4`,h=w.join(o,g);try{let C=await He(e,l,d,i,h);c.push(g),console.log(C);}catch(C){console.error(re("createClip()"),C),p();}}console.log("All clips created successfully."),n(c);})}var He=(e,t,i,r=0,o)=>{let n=V(t),p=V(i),c=Math.max(1,p-n);r=Number(r);let a=constrain(n-r,0,n+c*.5),s=Math.max(p+r,n+c*.5),m=floorF(s-a,3);if(r&&console.log({geminiClipDuration:c,newduration:m}),m<1/120)throw new Error(`Video clip duration is too small: ${m} Check the "options.buffer"`);return new Promise((l,d)=>{X(e).setStartTime(a).setDuration(m).videoCodec("libx264").audioCodec("aac").outputOptions("-pix_fmt","yuv420p","-crf","21","-b:a","192k").output(o).on("start",()=>{}).on("progress",f=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Video clip encoding: ${N(o)} | Progress: ${f.percent.toFixed(2)}%`);}).on("end",()=>{ne.cursorTo(process.stdout,0),console.log(),l(`Video clip created: ${N(o)}`);}).on("error",f=>d(`Error encoding video: ${N(o)} ${f}`)).run();})};var{bold:Ke,yellow:ce}=Ee;function pe(e){e.command("concat").description("Concatenate video clips into one").requiredOption("-l, --clip-list <clip_list_file>","Clip list file path").action(t=>{let i=w.dirname(t.clipList),r=w.join(i,"supercut.mp4");q(t,r);});}async function q(e,t){try{console.log(Ke("Concatenating video clips..."));let i=await Je(e.clipList,t);console.log(i);}catch(i){console.error(i);}}async function Je(e,t){return new Promise((i,r)=>{X(e).inputOptions(["-f","concat","-safe","0"]).outputOptions(["-c:v libx264","-pix_fmt yuv420p","-crf 21","-c:a aac","-b:a 192k","-preset ultrafast","-movflags","+faststart","-shortest","-af apad","-avoid_negative_ts make_zero","-fflags +genpts"]).output(t).on("start",()=>{console.log(`Concatenating started: ${ce(t)}`);}).on("progress",o=>{ne.cursorTo(process.stdout,0),process.stdout.write(`Encoding: Frames: ${o.frames} | FPS: ${o.currentFps} | Time: ${o.timemark} | Progress: ${o.percent?.toFixed(2)}%`);}).on("end",()=>{console.log(),i("Encoding completed");}).on("error",o=>r(`Error encoding video: ${ce(t)} ${o}`)).run();})}var{bold:T,red:le,yellow:z}=Ee;function de(e,t,i){e.command("timestamps").description("Generate text response from uploaded video").requiredOption("-i, --id <video_id>","Uploaded video ID").requiredOption("-p, --prompt <prompt>","Prompt for Gemini").option("-m, --model <model>","Gemini model to use for inference. (gemini-1.5-flash or gemini-1.5-pro)","gemini-1.5-flash").action(r=>{H(r,t,i,!0);});}async function H(e,t,i,r){let o=e.promptPrepend||G,n=e.promptAppend||O,p=e.outputPath||`output/${M(new Date)}`,c=t.getGenerativeModel({model:e.model}),a;try{a=await i.getFile(e.id),console.log(`Retrieved file ${z(a.displayName)} as ${z(a.uri)}
`),r&&(o&&console.log(`${T("Prepended prompt")}
${o}`),console.log(`${T("User prompt:")}`),console.log(e.prompt),n&&console.log(`${T("Appended prompt:")}
${n}
`));}catch(s){throw new Error(`${le("Error getting file from Google:")} ${s}`)}try{console.log(T(`Waiting for Gemini response...
`));let s=await c.generateContent([{fileData:{mimeType:a.mimeType,fileUri:a.uri}},{text:o+`
`+e.prompt+`
`+n}]);console.log(T("Response:")),console.log(s.response.text());let m=`${e.index.toString().padStart(3,"0")}-timestamps.txt`,l=w.join(p,m);x(l,s.response.text(),{overwrite:!0}),console.log(`Response saved to ${z(l)}
`);let d=`${o}
${e.prompt}
${n}`;x(w.join(p,"prompt.txt"),d,{overwrite:!0});}catch(s){throw new Error(`${le("Error generating Gemini response:")} ${s}`)}}function fe(e,t){e.command("list-files").description("See the list of files uploaded to Google").option("-n, --num <value>","How many videos to display","100").action(async i=>{let r=Number(i.num),o=0,n=Math.min(r,100),p=await t.listFiles({pageSize:n});console.log(p.files),o+=p.files.length;let c=p.nextPageToken;for(;c&&o<r;){let a=r-o;n=Math.min(a,100);let s=await t.listFiles({pageToken:c,pageSize:n});console.log(s.files),o+=s.files.length,c=s.nextPageToken;}console.log(`Found ${o} files.`);});}var{bold:ge,red:he,yellow:S}=Ee;function ye(e,t){e.command("upload").description("Upload a video file to Google cloud to use with Gemini inference").requiredOption("-v, --video <video_filepath>","Video to upload").action(i=>{W(i,t);});}async function W(e,t){let i=await t.listFiles({pageSize:100}),{files:r}=i,o=w.basename(e.video),n=await R(e.video),p=v.statSync(e.video).size.toString(),c=r.find(s=>s.displayName===o&&s.sizeBytes===p);if(c){let{displayName:s,name:m,uri:l}=c;return console.log(`File ${S(s)} is found as ${S(l)}
`),m}console.log(ge(`Uploading video ${S(o)}
`));let a="";try{a=(await t.uploadFile(e.video,{mimeType:n,displayName:o})).file.name;}catch(s){console.error(he("Error uploading file")),s instanceof Error&&(console.log(s.name),console.log(s.message));}try{let s=await t.getFile(a);for(process.stdout.write(ge(`Checking video state ${S(o)}`));s.state===FileState.PROCESSING;)await new Promise(m=>setTimeout(m,1e4)),s=await t.getFile(a),process.stdout.write(".");if(process.stdout.write(`
`),s.state===FileState.FAILED)throw new Error("Video processing failed.");console.log(`File ${S(s.displayName)} is uploaded and ready for inference as ${S(s.uri)}
`);}catch(s){console.error(he("Error verifying upload")),s instanceof Error&&(console.log(s.name),console.log(s.message));}return a}var we={name:"supercut",version:"0.1.1",description:"",main:"index.js",bin:{supercut:"bin/supercut.js"},type:"module",scripts:{watch:"tsup --watch",build:"tsc --noemit && tsup ./src/index.ts && just copy-files"},keywords:[],author:"Daeinc",devDependencies:{"@types/fluent-ffmpeg":"^2.1.24","@types/node":"^20.14.11",prettier:"^3.3.3",tsup:"^8.1.2",typescript:"^5.5.3"},dependencies:{"@daeinc/math":"^0.7.0","@google/generative-ai":"^0.15.0","@thi.ng/arrays":"^2.9.10",commander:"^12.1.0",dotenv:"^16.4.5","file-type":"^19.2.0","fluent-ffmpeg":"^2.1.3",kleur:"^4.1.5"}};var{blue:pt,bold:E,red:bo,yellow:ve}=Ee,y=new Command,mt=w.dirname(fileURLToPath(import.meta.url)),lt=w.dirname(mt);st.config({path:w.join(lt,".env")});var B=process.env.GEMINI_API_KEY;B===void 0&&(console.error("Error: GEMINI_API_KEY is not provided. Create `.env` file and add the API key."),process.exit(1));var xe=new GoogleGenerativeAI(B),I=new GoogleAIFileManager(B);y.name("supercut").description("Generate a supercut video with LLM").version(we.version);y.command("main").description("Main command").requiredOption("-v, --video <filepaths...>","Video file paths").requiredOption("-p, --prompt <text>","Text prompt to send Gemini").option("-pp, --prompt-prepend <prompt>","Prompt to prepend").option("-pa, --prompt-append <prompt>","Prompt to append").option("-b, --buffer <seconds>","Add/shrink each video clip duration. positive value to increase duration on either side.").option("-m, --model <model>","Gemini model to use for inference.","gemini-1.5-flash").option("-r, --random","Concatenate clips in random order").action(async e=>{let t=`output/${M(new Date)}`;v.existsSync(t)||v.mkdirSync(t,{recursive:!0});let i=e.promptPrepend||G,r=e.promptAppend||O;i&&console.log(`${E("Prepended prompt")}
${i}`),console.log(`${E("User prompt:")}`),console.log(e.prompt),r&&console.log(`${E("Appended prompt:")}
${r}
`);for(let c=0;c<e.video.length;c++){let a=e.video[c];if(!v.lstatSync(a).isFile()){console.log(`Not a file: ${ve(a)}`);continue}if(!await _(a,k)){console.log(`Not supported file type: ${ve(a)}`);continue}console.log(E(pt(`Processing ${c+1} of ${e.video.length} videos`)));let s="",m="";try{m=await W({video:a},I);}catch(l){console.error("Error uploading video:",l);}s=a;try{await H({...e,id:m,index:c,outputPath:t},xe,I,!1);}catch(l){console.error(l);continue}try{await U({video:s,index:c,buffer:e.buffer,timestamps:w.join(t,`${c.toString().padStart(3,"0")}-timestamps.txt`),random:e.random});}catch(l){console.error(l);continue}}let o=[];try{(await v.promises.readdir(t)).filter(a=>a.endsWith("cliplist.txt")).forEach(a=>{let m=v.readFileSync(w.join(t,a),"utf8").split(/\r?\n/);o.push(...m);});}catch{console.error("Error reading output directory");}e.random&&shuffle(o);let n=w.join(t,"all-cliplist.txt");v.writeFileSync(n,o.join(`
`),"utf8");let p=w.join(t,"supercut.mp4");await q({clipList:n},p),console.log(E(`Done
`));});ye(y,I);de(y,xe,I);se(y);pe(y);Z(y);fe(y,I);ie(y);y.parse();
